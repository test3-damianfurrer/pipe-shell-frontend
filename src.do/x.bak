#!/bin/bash
play(){
#!/bin/bash
#$1 channelname
./sh/update-ifseq.sh

source ./sh/selectavid.src
source ./sh/prcvideo.src

folder=$(echo "${1}" | sed 's/\/$//')
if [ "$folder" == "" ]; then
        #>&2 echo "Pass name!"
        #exit 1
        folder="videos"
fi
while [ $? -eq 0 ]
do
  id=$(selectavid "${folder}") || exit 1
  ./do.sh "update" &
  prcvideo "${id}"

done
}

doplaylistid(){
# $1 playlistid
source sh/prcplaylist.src
source sh/_menu.src
if [ "$1" != "" ]; then
  prcplaylist "$1"
else
  prcplaylist $(cat play.list | _menu 10 'list' | awk '{print $1}' FS=';')
fi
}

dovidid(){
#$1 id
#source ./sh/selectavid.src
./sh/update-ifseq.sh
source ./sh/prcvideo.src
prcvideo "${1}" &
./do.sh "update"
}

doallplay(){
#$1 channelname
./sh/update-ifseq.sh

source ./sh/selectavid.src
source ./sh/prcvideo.src

folder=$(echo "${1}" | sed 's/\/$//')
if [ "$folder" == "" ]; then
        folder="videos"
fi
./do.sh "update" &
sorting=$(getselectionmodes | _menu 5 "Sorting")
retc=0
declare -i i
i=1
while [ $i -le 100 ]
do
  id=$(selectavid "${folder}" "$sorting" $i) || exit 1
  prcvideo "${id}" "${2}" # "view+{;}qualselect{;}480p{x}530106{x}MPEG_4{v-a}126 kbps{x}132459{x}M4A{;}next" || retc=$?
  i+=1
done
}

listenall(){
#!/bin/bash
#$1 channelname
./do.sh "doallplay" "${1}" "listen{;}126 kbps{x}132459{x}M4A{;}next"
}

viewall(){
#!/bin/bash
#$1 channelname
./do.sh "doallplay" "${1}" "qualselect{;}480p{x}530106{x}MPEG_4{v-a}126 kbps{x}132459{x}M4A{;}next"
}

search(){
./sh/update-ifseq.sh
[ "$(type -t prcvideo)" == "function" ] || source ./sh/prcvideo.src
[ "$(type -t search_video)" == "function" ] || source ./sh/search-video.src
[ "$(type -t search_video_prcloop)" == "function" ] || source ./sh/search-video-prcloop.src
[ "$(type -t urlencode)" == "function" ] || source ./sh/urlencode.src
[ "$(type -t _pipedget)" == "function" ] || source sh/_pipedget.src

[ "$1" == "" ] && exit
#vlist=$(./sh/search-video.sh "${1}") || exit 1
##actions=$(echo "view"; echo "description"; echo "next"; echo "exit")

#maybe use: 
#        ./sh/search-video-prcloop.sh <<< "${relstream}"
url=$(urlencode <<< "$1")
# 2>/dev/null
_pipedget "search?q=${url}&filter=videos" | jq '.items[]' | search_video_prcloop
}

searchto(){
./sh/update-ifseq.sh
[ "$(type -t prcvideo_loop)" == "function" ] || source ./sh/prcvideo-loop.src
[ "$(type -t search_video)" == "function" ] || source ./sh/search-video.src
[ "$(type -t search_video_prcloop)" == "function" ] || source ./sh/search-video-prcloop.src
[ "$(type -t urlencode)" == "function" ] || source ./sh/urlencode.src
[ "$(type -t _pipedget)" == "function" ] || source sh/_pipedget.src

[ "$1" == "" ] && exit
#vlist=$(./sh/search-video.sh "${1}") || exit 1
##actions=$(echo "view"; echo "description"; echo "next"; echo "exit")

#maybe use: 
#        ./sh/search-video-prcloop.sh <<< "${relstream}"
url=$(urlencode <<< "$1")
# 2>/dev/null
#_pipedget "search?q=${url}&filter=videos" | jq -r '.items[].id' | prcloop # | search_video_prcloop
_pipedget "search?q=${url}&filter=videos" | jq -r '.items[]' | search_video "${1}" | prcvideo_loop \
"listen{;}126 kbps{x}132459{x}M4A{;}next"
}

subscribe(){
./sh/update-ifseq.sh
source ./sh/getchannel.src
source ./sh/search-channel.src
source ./sh/setup.src

[ "$1" == "" ] && exit 1
#echo "#$1" >> channels.lst
#./sh/search-channel.sh "${1}" >> channels.lst
res=$(search_channel "${1}")
[ "$res" != "" ] && echo "#--$1" >> abos.lst && echo "${res}" >> abos.lst && echo "#++$1" >> abos.lst

while read chnl
do
  getchannel "${chnl}" | setup
done <<< "$res"
}

unsubscribe(){
[ -d "${1}" ] || exit 1
channelid=$(cat "${1}/id.json")
#foldername=$(basename $(pwd -P))
foldername=$(cat "${1}/name.json")
#echo "$channelid"

cd "channels/${foldername}"
for f in _uploaded/*
do
  if [ "$f" != "_uploaded/*" ]; then
    vid=$(cat "${f}/id.txt")
    ../../sh/rmvideo.sh "${vid}"
  fi
done

rm -r "_uploaded"
rm -r "_duration"
cd ../../
cd "channels"
rm -r "${foldername}"
cd ../channel_ids
rm "${channelid}"

#cp channels.lst channels2.lst
cat channels.lst | grep -v "$channelid" > channels.lst
#rm channels2.lst
#or cat channels.lst | grep -v "$channelid" > channels.lst
}

update(){
#for new setup use ./sh/update-seq
#this update is much slower, when acctual work has to be done.
# it is only faster for quickly checking everything, while having almost no real updating to do.

source ./sh/update.src
grep -v '#' abos.lst | update
}

help(){
echo "available Actions:"
cat do.sh |  grep -A 1000 "action()"'{' | grep -m 1 -B 1000 "^"'}'  | grep "\")" | awk '{print $2}' FS='"'
}

createplaylist(){
#!/bin/bash
#"$1" vidid(s) to add
# $2  playlist name
# $3  optional base playlist path
source sh/create-lplaylist.src

baseid=""
[ "$3" ] && cd "$3" && baseid=$(pwd -P) && baseid=$(basename "${baseid}")
echo "${baseid}"
[ "$1" ] && echo "$1" | create_lplaylist "${2}" "${baseid}"
[ "$1" ] || echo "" | create_lplaylist "${2}" "${baseid}"
}

